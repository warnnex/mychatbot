from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext
)
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
USER_ID, SENDING_MESSAGE = range(2)

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ö—Ä–∞–Ω–∏—Ç Telegram ID)
users_db = {}

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users_db[user_id] = {"id": user_id}
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø - MyChat. –ë–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        f"–í–∞—à ID - {user_id}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)"
    )
    return USER_ID

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
async def handle_user_id(update: Update, context: CallbackContext) -> int:
    try:
        receiver_id = int(update.message.text.strip())
        if receiver_id not in users_db:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID."
            )
            return USER_ID

        context.user_data['receiver_id'] = receiver_id
        await update.message.reply_text(
            f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {receiver_id}.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ.\n"
            "‚ö† –ì–æ–ª–æ—Å–æ–≤—ã–µ, –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!"
        )
        return SENDING_MESSAGE

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return USER_ID

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message(update: Update, context: CallbackContext) -> int:
    if update.message.voice or update.message.video_note or update.message.sticker:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –°–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
        return SENDING_MESSAGE

    receiver_id = context.user_data.get('receiver_id')
    if receiver_id:
        if update.message.text:
            await context.bot.send_message(receiver_id, f"üì© –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}")
        elif update.message.photo:
            caption = update.message.caption if update.message.caption else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            await context.bot.send_photo(
                receiver_id, 
                update.message.photo[-1].file_id, 
                caption=f"üì© –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Ñ–æ—Ç–æ\n\n{caption}"
            )

        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        return ConversationHandler.END

    return USER_ID

# –ö–æ–º–∞–Ω–¥–∞ /send
async def send_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üîÅ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ /start."
    )

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("8167761012:AAEdL2As9eYz-zoCEZQZCDumB6O0A0zlPtA").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_id)],
            SENDING_MESSAGE: [MessageHandler(filters.TEXT | filters.PHOTO, send_message)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler('send', send_command))
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
