import asyncio
import logging
import random
import string

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ ID
TOKEN = "7556436194:AAEjr6eugXufrFjW3zQEZB388kOyOukzm9o"
ADMIN_ID = 7571837281  # –¢–≤–æ–π Telegram ID
ADMIN_PASSWORD = "Nazar2810"

bot = Bot(token=TOKEN)
dp = Dispatcher()

referrals = {}
admin_sessions = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_ref_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    ref_code = generate_ref_code()
    referrals[ref_code] = user_id
    bot_info = await bot.get_me()
    bot_username = bot_info.username

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç WorldHack.\n\n"
        f"–¢–≤–æ—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: https://t.me/{bot_username}?start={ref_code}\n"
        f"–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ –Ω–µ–π, —Ç–µ–±–µ –ø—Ä–∏–¥—É—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ."
    )

@dp.message()
async def handle_referral(message: Message):
    if message.text.startswith("/start "):
        ref_code = message.text.split(" ")[1]
        if ref_code in referrals:
            referrer_id = referrals[ref_code]
            new_user = message.from_user

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É", url=f"https://t.me/{(await bot.get_me()).username}")]
                ]
            )

            try:
                await bot.send_message(
                    referrer_id,
                    f"üîî –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n"
                    f"üë§ –ò–º—è: {new_user.full_name}\n"
                    f"üì¢ –Æ–∑–µ—Ä–Ω–µ–π–º: @{new_user.username or '–ù–µ—Ç'}\n"
                    f"üÜî ID: {new_user.id}",
                    reply_markup=keyboard
                )
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {referrer_id} –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {new_user.id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
                await message.answer("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É.")

        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("give"))
async def give_access(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    admin_sessions[message.from_user.id] = "waiting_password"

@dp.message()
async def handle_password(message: Message):
    user_id = message.from_user.id
    if user_id in admin_sessions and admin_sessions[user_id] == "waiting_password":
        if message.text == ADMIN_PASSWORD:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="give_link")],
                    [InlineKeyboardButton(text="–í—ã–π—Ç–∏", callback_data="exit_admin")]
                ]
            )
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.", reply_markup=keyboard)
            admin_sessions[user_id] = "admin_menu"
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

@dp.callback_query()
async def handle_admin_menu(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id in admin_sessions and admin_sessions[user_id] == "admin_menu":
        if callback_query.data == "give_link":
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username):")
            admin_sessions[user_id] = "waiting_username"
        elif callback_query.data == "exit_admin":
            del admin_sessions[user_id]
            await bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

@dp.message()
async def handle_username(message: Message):
    user_id = message.from_user.id
    if user_id in admin_sessions and admin_sessions[user_id] == "waiting_username":
        target_username = message.text.replace("@", "")
        ref_code = generate_ref_code()
        referrals[ref_code] = "5_activations"
        bot_info = await bot.get_me()
        bot_username = bot_info.username

        try:
            await bot.send_message(
                message.chat.id,
                f"‚úÖ –í—ã–¥–∞–ª —Å—Å—ã–ª–∫—É –¥–ª—è @{target_username}:\n"
                f"https://t.me/{bot_username}?start={ref_code} (5 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
        del admin_sessions[user_id]

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
